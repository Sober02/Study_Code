public class TwoDimensionDemo {
    public static void main(String[] args) {
        //1.二维数组静态初始化格式
        // 数据类型[][] 数组名 = new 数据类型[][] {[元素1,元素2],[元素1，元素2]};
        int[][] arr1 = new int[][]{{1, 2, 3}, {4, 5, 6, 7, 8}};
        int[][] arr2 = {{1, 2, 3}, {4, 5, 6, 7, 8}};
        //以后建议这样定义，把每一个一维数组，单独写成一行
        // 注意:每一个一维数组其实是二维数组中的元素，所以每一个一维数组之间需要用逗号隔开。
        // 最后一个一维数组后面不需要加逗号
        int[][] arr3 = {
                {1, 2, 3},
                {4, 5, 6, 7, 8}
        };

        //2.获取元素
        //System.out.printIn(arr3[0]);//表示获取二维数组中的第一个一维数组地址

        //arr3[0]:二维数组中的第一个一维数组
        //arr3[0][0]: 获取第一个一维数组中0索引的元素
//        System.out.println(arr3[0][0]);//1
//        System.out.println(arr3[1][4]);//8
//        System.out.println(arr3[2][0]);//error
        
        //3.遍历二维数组
        //外循环: 遍历二维数组，得到里面的每一个一维数组
        /*for (int i = 0; i < arr3.length; i++) {
            //i:表示二维数组中的每一个索引
            //arr3[i]: 表示二维数组中的每一个元素(一维数组)
            //内循环:遍历一维数组，得到里面的每一个元素
            for (int j = 0; j < arr3[i].length; j++) {
                //j:表示一维数组中的每一个元素
                System.out.print(arr3[i][j] + " ");
            }
            System.out.println();
        }*/
        /*二维数组的动态初始化
        格式: 数据类型 数组名 = new 数据类型[m][n]
        m表示这个二维数组，可以存放多少个一维数组(行)
        n表示每一个一维数组，可以存放多少个元素(列)
        范例: int]][] arr = new int[2][3];
        该数组可以存放2个一维数组，
        每个一维数组中可以存放3个int类型元素
        */

        //1.利用动态初始化格式创建二维数组
        //3:表示二维数组长度为3，可以装3个一维数组
        //5:表示每一个一维数组的长度都是5，可以装5个int类型的元素
        int[][] arr = new int[3][5];

        arr[0][0] = 10;
        for (int i = 0; i < arr.length; i++) {
            for (int j = 0; j < arr[i].length; j++) {
                System.out.print(arr[i][j] + " ");
            }
            System.out.println();
        }

        //总结：
//        1.当我们需要把数据分组管理的时候，就需要用到二维数组
//        2.掌握二维数组的静态初始化、动态初始化
//        3.如何给二维数组中的元素赋值
//        4.如何遍历二维数组
            }
        }
